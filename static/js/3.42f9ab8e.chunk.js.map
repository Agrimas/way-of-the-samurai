{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatus","props","useState","status","setStatus","editMode","setEditMode","useEffect","autoFocus","onBlur","updateStatus","onChange","event","currentTarget","value","type","onDoubleClick","ProfileInfo","className","Classes","photo","src","alt","description","profile","fullName","Post","post","avatar","likeCount","text","MyPosts","PostElements","PostData","map","id","formik","useFormik","initialValues","textarea","onSubmit","values","addPost","resetForm","posts","handleSubmit","form","name","handleChange","MyPostsContainer","connect","state","profilePage","Profile","compose","authId","auth","userId","getProfile","getStatus","withRouter","firstRender","setFirstRender","isFetching","setFetching","getInfo","a","Promise","all","match","params","history","push","withFetching","Preloader"],"mappings":"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","file":"static/js/3.42f9ab8e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"ProfileInfo_photo__3FOy3\",\"description\":\"ProfileInfo_description__1bJdT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"MyPosts_form__16HMr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3kPnM\",\"avatar\":\"Post_avatar__2STH9\"};","import React, {useEffect, useState} from 'react';\r\n\r\n\r\nfunction ProfileStatus(props) {\r\n    let [status, setStatus] = useState(props.status);\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    },[props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        if (editMode !== props.status) {\r\n            props.updateStatus(status);\r\n        }\r\n    }\r\n\r\n    const updateStatusHandler = (event) => {\r\n        setStatus(event.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {editMode ?\r\n                <input autoFocus={true} onBlur={deactivateEditMode}\r\n                       onChange={updateStatusHandler}\r\n                       type=\"text\"\r\n                       value={status}/> :\r\n                <div>\r\n                        <span\r\n                            onDoubleClick={activateEditMode}>{props.status || 'Статус пуст'}</span>\r\n                </div>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ProfileStatus;","import React from \"react\";\r\nimport Classes from './ProfileInfo.module.css'\r\nimport Status from './ProfileStatus/ProfileStatus'\r\n\r\nconst ProfileInfo = (props) => {\r\n    return (\r\n        <div>\r\n            <img className={Classes.photo} src=\"https://c.wallhere.com/photos/51/ec/landscape-81752.jpg!d\"\r\n                 alt=\"main-img\"/>\r\n            <h1 className={Classes.description}>\r\n                {props.profile?.fullName}\r\n            </h1>\r\n            <Status status={props.status} updateStatus={props.updateStatus}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport Classes from \"./Post.module.css\";\r\n\r\nfunction Post(props) {\r\n    return (\r\n        <div className={Classes.post}>\r\n            <div>\r\n                <img className={Classes.avatar}\r\n                     src=\"https://images.pexels.com/photos/510469/pexels-photo-510469.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\"\r\n                     alt=\"\"/>\r\n                <span>Likes: {props.likeCount}</span>\r\n            </div>\r\n            <p>{props.text}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport Classes from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {useFormik} from \"formik\";\r\n\r\nconst MyPosts = (props) => {\r\n    let PostElements = props.PostData.map(post => <Post key={post.id} id={post.id} likeCount={post.likeCount}\r\n                                                        text={post.text}/>);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            textarea: '',\r\n        },\r\n        onSubmit(values) {\r\n            props.addPost(values.textarea);\r\n            formik.resetForm();\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={Classes.posts}>\r\n            My posts\r\n            <form onSubmit={formik.handleSubmit} className={Classes.form}>\r\n                <textarea\r\n                    id=\"textarea\"\r\n                    name=\"textarea\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.textarea}\r\n                />\r\n                <button type=\"submit\">\r\n                    Отправить\r\n                </button>\r\n            </form>\r\n            {PostElements}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPost} from \"../../../redux/reducers/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        PostData: state.profilePage.PostData,\r\n    };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {addPost})(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React, {useEffect, useState} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfile, getStatus, updateStatus} from \"../../redux/reducers/profile-reducer\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {withFetching} from \"../../utils/withFetching\";\r\nimport {withSuspense} from \"../../hoc/withSuspense\";\r\n\r\nfunction ProfileContainer(props) {\r\n    let [firstRender, setFirstRender] = useState(true);\r\n    let [isFetching, setFetching] = useState(false);\r\n\r\n    useEffect(async () => {\r\n            if (firstRender) {\r\n                setFirstRender(false);\r\n            }\r\n            let userId = props.match.params.userId;\r\n            if (!userId) {\r\n                userId = props.authId;\r\n                if (!userId) {\r\n                    props.history.push('/login');\r\n                    return;\r\n                }\r\n            }\r\n\r\n            async function getInfo(id) {\r\n                await Promise.all([props.getProfile(id), props.getStatus(id)])\r\n            }\r\n\r\n            withFetching(getInfo, setFetching, [+userId])\r\n        },\r\n        [props.match.params.userId])\r\n\r\n    return (\r\n        isFetching || firstRender ?\r\n            <Preloader/> :\r\n            <Profile\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}/>\r\n    );\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        authId: state.auth.userId,\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n    }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, {\r\n    getProfile,\r\n    getStatus,\r\n    updateStatus\r\n}), withRouter)(ProfileContainer);"],"sourceRoot":""}